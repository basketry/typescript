/**
 * This code was generated by @basketry/typescript@0.2.0-rc.0
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 *
 * To make changes to the contents of this file:
 * 1. Edit source/path.ext
 * 2. Run the Basketry CLI
 *
 * About Basketry: https://basketry.io
 * About @basketry/typescript: https://basketry.io/docs/components/@basketry/typescript
 */

/** Interface for the Auth Permutation Service */
export interface AuthPermutationService {
  allAuthSchemes(): Promise<void>;

  comboAuthSchemes(): Promise<void>;
}

/** Interface for the Exhaustive Service */
export interface ExhaustiveService {
  exhaustiveFormats(params?: ExhaustiveFormatsParams): Promise<void>;

  exhaustiveParams(params: ExhaustiveParamsParams): Promise<void>;
}

/** Interface for the Gizmo Service */
export interface GizmoService {
  /**
   * Has a summary in addition to a description
   *
   * Has a description in addition to a summary
   */
  createGizmo(params?: CreateGizmoParams): Promise<Gizmo>;

  /**
   * Only has a summary
   *
   * @deprecated
   */
  getGizmos(params?: GetGizmosParams): Promise<GetGizmosResponse>;

  updateGizmo(params?: UpdateGizmoParams): Promise<Gizmo>;
}

/** Interface for the Widget Service */
export interface WidgetService {
  createWidget(params?: CreateWidgetParams): Promise<void>;

  deleteWidgetFoo(params?: DeleteWidgetFooParams): Promise<void>;

  getWidgetFoo(params?: GetWidgetFooParams): Promise<Widget>;

  getWidgets(): Promise<Widget>;

  putWidget(): Promise<void>;
}

export type CreateGizmoParams = {
  /** Anonymous enum */
  size?: CreateGizmoSize;
};

export type CreateWidgetParams = {
  /** The new widget */
  string?: CreateWidgetString;
};

export type DeleteWidgetFooParams = {
  /** The widget ID */
  id?: string;
};

export type ExhaustiveFormatsParams = {
  stringNoFormat?: string;
  stringDate?: Date;
  stringDateTime?: Date;
  integerNoFormat?: number;
  integerInt32?: number;
  integerInt64?: number;
  numberNoFormat?: number;
  numberFloat?: number;
  numberDouble?: number;
};

export type ExhaustiveParamsParams = {
  pathString: string;
  pathNumber: number;
  pathInteger: number;
  pathBoolean: boolean;
  pathStringArray: string[];
  pathNumberArray: number[];
  pathIntegerArray: number[];
  pathBooleanArray: boolean[];
  string?: ExhaustiveParamsString;
  queryString?: string;
  queryEnum?: ExhaustiveParamsQueryEnum;
  queryNumber?: number;
  queryInteger?: number;
  queryBoolean?: boolean;
  queryStringArray?: string[];
  queryEnumArray?: ExhaustiveParamsQueryEnumArray[];
  queryNumberArray?: number[];
  queryIntegerArray?: number[];
  queryBooleanArray?: boolean[];
  pathEnum?: ExhaustiveParamsPathEnum;
  pathEnumArray?: ExhaustiveParamsPathEnumArray[];
  headerString?: string;
  headerEnum?: ExhaustiveParamsHeaderEnum;
  headerNumber?: number;
  headerInteger?: number;
  headerBoolean?: boolean;
  headerStringArray?: string[];
  headerEnumArray?: ExhaustiveParamsHeaderEnumArray[];
  headerNumberArray?: number[];
  headerIntegerArray?: number[];
  headerBooleanArray?: boolean[];
};

export type GetGizmosParams = {
  search?: string;
};

export type GetWidgetFooParams = {
  /** The widget ID */
  id?: string;
};

export type UpdateGizmoParams = {
  /** array of primitive */
  factors?: string[];
};

export type CreateGizmoSize = 'small' | 'medium' | 'big' | 'XL';

export type ExhaustiveParamsHeaderEnum = 'one' | 'two' | 'three';

export type ExhaustiveParamsHeaderEnumArray = 'one' | 'two' | 'three';

export type ExhaustiveParamsPathEnum = 'one' | 'two' | 'three';

export type ExhaustiveParamsPathEnumArray = 'one' | 'two' | 'three';

export type ExhaustiveParamsQueryEnum = 'one' | 'two' | 'three';

export type ExhaustiveParamsQueryEnumArray = 'one' | 'two' | 'three';

export type MultiValueEnum = 'the value' | 'another value';

export type ProductSize = 'small' | 'medium' | 'large';

export type SingleValueEnum = 'the value';

export type Cat = {
  type?: 'cat';
  lives?: number;
};

export type CreateWidgetString = {
  name?: string;
};

export type Dog = {
  type?: 'dog';
  goodBoi?: boolean;
};

export type ExhaustiveParamsString = {
  foo?: string;
  bar?: string;
};

export type GetGizmosResponse = {
  data?: Gizmo[];
};

export type Gizmo = {
  id?: string;
  name?: string;
  size?: ProductSize;
};

export type NewWidget = {
  name?: string;
  fiz?: number;
  buzz?: number;
  fizbuzz?: number;
  foo?: NewWidgetFoo;
  size?: ProductSize;
};

export type NewWidgetFoo = {
  fiz?: 123456;
  buzz?: number;
};

export type PartA = {
  a?: SingleValueEnum;
  b?: MultiValueEnum;
  const?: 'the only value';
};

export type PartB = {
  g?: string;
  h?: string;
  e?: string;
  f?: string;
  c?: string;
  d?: string;
};

export type PartC = {
  g?: string;
  h?: string;
  e?: string;
  f?: string;
};

export type PartD = {
  g?: string;
  h?: string;
};

export type SomeType = {
  a?: string;
  nestedUnion?: SomeTypeNestedUnion;
};

export type Widget = {
  id?: string;
  name?: string;
  fiz?: number;
  buzz?: number;
  fizbuzz?: number;
  foo?: WidgetFoo;
  size?: ProductSize;
};

export type WidgetFoo = {
  fiz?: 123456;
  buzz?: number;
};

export type Animal = Cat | Dog;

export function isCat(obj: Animal): obj is Cat {
  return obj.type === 'cat';
}

export function isDog(obj: Animal): obj is Dog {
  return obj.type === 'dog';
}

export type SomeTypeNestedUnion = PartA | PartB;

export type TopLevelUnion = PartA | PartB;
