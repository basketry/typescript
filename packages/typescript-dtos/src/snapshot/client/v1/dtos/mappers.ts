/**
 * This code was generated by @basketry/typescript-dtos@{{version}}
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 *
 * To make changes to the contents of this file:
 * 1. Edit source/path.ext
 * 2. Run the Basketry CLI
 *
 * About Basketry: https://basketry.io
 * About @basketry/typescript-dtos: https://basketry.io/docs/components/@basketry/typescript-dtos
 */

import type * as types from '../types';
import type * as dtos from './types';

function compact<T extends object>(obj: T): T {
  return Object.keys(obj).reduce((acc, key) => {
    const value = obj[key as keyof T];
    if (value !== undefined) {
      acc[key as keyof T] = value;
    }
    return acc;
  }, {} as T);
}

export function mapFromGetGizmosResponseDto(
  dto: dtos.GetGizmosResponseDto,
): types.GetGizmosResponse {
  return compact({
    data: dto.data?.map(mapFromGizmoDto),
  });
}

export function mapFromGizmoDto(dto: dtos.GizmoDto): types.Gizmo {
  return compact({
    id: dto.id,
    name: dto.name,
    size: dto.size,
  });
}

export function mapFromWidgetDto(dto: dtos.WidgetDto): types.Widget {
  return compact({
    id: dto.id,
    name: dto.name,
    fiz: dto.fiz,
    buzz: dto.buzz,
    fizbuzz: dto.fizbuzz,
    foo:
      typeof dto.foo === 'undefined' ? undefined : mapFromWidgetFooDto(dto.foo),
    size: dto.size,
  });
}

export function mapFromWidgetFooDto(dto: dtos.WidgetFooDto): types.WidgetFoo {
  return compact({
    fiz: dto.fiz,
    buzz: dto.buzz,
  });
}

export function mapToCreateWidgetStringDto(
  obj: types.CreateWidgetString,
): dtos.CreateWidgetStringDto {
  return compact({
    name: obj.name,
  });
}

export function mapToExhaustiveParamsStringDto(
  obj: types.ExhaustiveParamsString,
): dtos.ExhaustiveParamsStringDto {
  return compact({
    foo: obj.foo,
    bar: obj.bar,
  });
}
