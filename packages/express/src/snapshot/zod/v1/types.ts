/**
 * This code was generated by @basketry/typescript@0.2.3
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 *
 * To make changes to the contents of this file:
 * 1. Edit source/path.ext
 * 2. Run the Basketry CLI
 *
 * About Basketry: https://basketry.io
 * About @basketry/typescript: https://basketry.io/docs/components/@basketry/typescript
 */

/** Interface for the Auth Permutation Service */
export interface AuthPermutationService {
  allAuthSchemes(): Promise<void>;

  comboAuthSchemes(): Promise<void>;
}

/** Interface for the Exhaustive Service */
export interface ExhaustiveService {
  exhaustiveFormats(params?: ExhaustiveFormatsParams): Promise<void>;

  exhaustiveParams(params: ExhaustiveParamsParams): Promise<void>;
}

/**
 * Single paragraph description
 *
 * @deprecated
 */
export interface GizmoService {
  /**
   * Has a summary in addition to a description
   *
   * Has a description in addition to a summary
   */
  createGizmo(params?: CreateGizmoParams): Promise<Gizmo>;

  /**
   * Only has a summary
   *
   * @deprecated
   */
  getGizmos(params?: GetGizmosParams): Promise<GizmosResponse>;

  updateGizmo(params?: UpdateGizmoParams): Promise<Gizmo>;
}

/** Interface for the Map Demo Service */
export interface MapDemoService {
  returnMaps(): Promise<AllMaps>;

  sendMaps(params?: SendMapsParams): Promise<void>;
}

/**
 * First paragraph of a multi-paragraph description
 *
 * Second paragraph of a multi-paragraph description
 */
export interface WidgetService {
  createWidget(params?: CreateWidgetParams): Promise<void>;

  deleteWidgetFoo(params: DeleteWidgetFooParams): Promise<void>;

  getWidgetFoo(params: GetWidgetFooParams): Promise<Widget>;

  getWidgets(): Promise<Widget>;

  putWidget(): Promise<void>;
}

export type CreateGizmoParams = {
  /** Anonymous enum */
  size?: CreateGizmoSize;
};

export type CreateWidgetParams = {
  /** The new widget */
  body?: CreateWidgetBody;
};

export type DeleteWidgetFooParams = {
  /** The widget ID */
  id: string;
};

export type ExhaustiveFormatsParams = {
  stringNoFormat?: string;
  stringDate?: Date;
  stringDateTime?: Date;
  integerNoFormat?: number;
  integerInt32?: number;
  integerInt64?: number;
  numberNoFormat?: number;
  numberFloat?: number;
  numberDouble?: number;
};

export type ExhaustiveParamsParams = {
  pathString: string;
  pathEnum: ExhaustiveParamsPathEnum;
  pathNumber: number;
  pathInteger: number;
  pathBoolean: boolean;
  pathStringArray: string[];
  pathEnumArray: ExhaustiveParamsPathEnumArray[];
  pathNumberArray: number[];
  pathIntegerArray: number[];
  pathBooleanArray: boolean[];
  queryString?: string;
  queryEnum?: ExhaustiveParamsQueryEnum;
  queryNumber?: number;
  queryInteger?: number;
  queryBoolean?: boolean;
  queryStringArray?: string[];
  queryEnumArray?: ExhaustiveParamsQueryEnumArray[];
  queryNumberArray?: number[];
  queryIntegerArray?: number[];
  queryBooleanArray?: boolean[];
  headerString?: string;
  headerEnum?: ExhaustiveParamsHeaderEnum;
  headerNumber?: number;
  headerInteger?: number;
  headerBoolean?: boolean;
  headerStringArray?: string[];
  headerEnumArray?: ExhaustiveParamsHeaderEnumArray[];
  headerNumberArray?: number[];
  headerIntegerArray?: number[];
  headerBooleanArray?: boolean[];
  body?: ExhaustiveParamsBody;
};

export type GetGizmosParams = {
  search?: string;
};

export type GetWidgetFooParams = {
  /** The widget ID */
  id: string;
};

export type SendMapsParams = {
  allMaps?: AllMaps;
};

export type UpdateGizmoParams = {
  /** array of primitive */
  factors?: string[];
};

/** @deprecated */
export type CreateGizmoSize = 'small' | 'medium' | 'big' | 'XL';

export type ExhaustiveParamsHeaderEnum = 'one' | 'two' | 'three';

export type ExhaustiveParamsHeaderEnumArray = 'one' | 'two' | 'three';

export type ExhaustiveParamsPathEnum = 'one' | 'two' | 'three';

export type ExhaustiveParamsPathEnumArray = 'one' | 'two' | 'three';

export type ExhaustiveParamsQueryEnum = 'one' | 'two' | 'three';

export type ExhaustiveParamsQueryEnumArray = 'one' | 'two' | 'three';

export type ProductSize = 'small' | 'medium' | 'large';

export type AllMaps = {
  complexKeyMapA: ComplexKeyMapA;
  pureMapA: PureMapA;
  pureMapB: PureMapB;
  pureMapC: PureMapC;
  pureMapD: PureMapD;
  mixedMapA: MixedMapA;
  mixedMapB: MixedMapB;
  mixedMapC: MixedMapC;
  mixedMapD: MixedMapD;
};

/** Has validation rules on the map key */
export type ComplexKeyMapA = Record<string, string>;

export type CreateWidgetBody = {
  name: string;
};

export type ExampleMapValue = {
  foo?: string;
  bar?: string;
  createdAt: Date;
};

export type ExhaustiveParamsBody = {
  foo?: string;
  bar?: string;
};

/** @deprecated */
export type Gizmo = {
  id?: string;
  name?: string;

  /** @deprecated */
  size?: ProductSize;
} & Record<string, GizmoMapValue | ProductSize | string | undefined>;

export type GizmoMapValue = {
  foo: string;
  bar: string;
};

export type GizmosResponse = {
  data: Gizmo[];
};

/** Has no required map keys */
export type MixedMapA = {
  objId: string;
  objName?: string;
} & Record<string, ExampleMapValue | string | undefined>;

/** Has required map keys */
export type MixedMapB = {
  objId: string;
  objName?: string;
  objFizz: ExampleMapValue;
  objBuzz: ExampleMapValue;
} & Record<string, ExampleMapValue | string | undefined>;

/** Has required map keys and max properties GREATER THAN the number of required props and keys */
export type MixedMapC = {
  objId: string;
  objName?: string;
  objFizz: ExampleMapValue;
  objBuzz: ExampleMapValue;
} & Record<string, ExampleMapValue | string | undefined>;

/** Has required map keys and max properties EQUAL TO the number of required props and keys */
export type MixedMapD = {
  objId: string;
  objName?: string;
  objFizz: ExampleMapValue;
  objBuzz: ExampleMapValue;
};

export type NewWidget = {
  name?: string;
  fiz: number;
  buzz?: number;
  fizbuzz?: number;
  foo?: NewWidgetFoo;
  size?: ProductSize;
};

export type NewWidgetFoo = {
  fiz?: number;
  buzz: number;
};

/** Has no required map keys */
export type PureMapA = Record<string, ExampleMapValue>;

/** Has required map keys */
export type PureMapB = {
  objFizz: ExampleMapValue;
  objBuzz: ExampleMapValue;
} & Record<string, ExampleMapValue>;

/** Has required map keys and max properties GREATER THAN the number of required keys */
export type PureMapC = {
  objFizz: ExampleMapValue;
  objBuzz: ExampleMapValue;
} & Record<string, ExampleMapValue>;

/** Has required map keys and max properties EQUAL TO the number of required keys */
export type PureMapD = {
  objFizz: ExampleMapValue;
  objBuzz: ExampleMapValue;
};

export type Widget = {
  id: string;
  name?: string;
  fiz: number;
  buzz?: number;
  fizbuzz?: number;
  foo?: WidgetFoo;
  size?: ProductSize;
  data: WidgetData;
};

export type WidgetData = {
  fizz: GizmoMapValue;
  buzz: GizmoMapValue;
} & Record<string, GizmoMapValue>;

export type WidgetFoo = {
  fiz?: number;
  buzz: number;
};

export type ExampleUnion = Gizmo | string[];
