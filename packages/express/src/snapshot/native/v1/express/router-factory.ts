/**
 * This code was generated by @basketry/express@{{version}}
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 *
 * To make changes to the contents of this file:
 * 1. Edit source/path.ext
 * 2. Run the Basketry CLI
 *
 * About Basketry: https://basketry.io
 * About @basketry/express: https://basketry.io/docs/components/@basketry/express
 */

import { Router, type RequestHandler } from 'express';

import * as handlers from './handlers';
import * as errors from './errors';
import type * as expressTypes from './types';

export function getRouter({
  schema,
  getAuthPermutationService,
  getExhaustiveService,
  getGizmoService,
  getWidgetService,
  middleware,
  handlerOverrides,
  swaggerUiVersion = '3.51.1',
}: expressTypes.RouterFactoryInput): Router {
  const router = Router();
  const methodNotAllowed: (allow: string) => RequestHandler =
    (allow) => (_req, res, next) => {
      res.set('Allow', allow);
      return next(errors.methodNotAllowed());
    };

  function handlersFor<
    TName extends Exclude<
      keyof expressTypes.Middleware,
      '_onlySwaggerUI' | '_exceptSwaggerUI'
    >,
  >(methodName: TName, defaultHandler: RequestHandler): RequestHandler[] {
    return [
      ...getMiddleware(middleware, methodName),
      ...getHandlers(handlerOverrides?.[methodName], defaultHandler),
    ];
  }

  router
    .route('/authPermutations')
    .get(
      handlersFor(
        'allAuthSchemes',
        handlers.handleAllAuthSchemes(getAuthPermutationService),
      ),
    )
    .put(
      handlersFor(
        'comboAuthSchemes',
        handlers.handleComboAuthSchemes(getAuthPermutationService),
      ),
    )
    .options((_, res) => {
      res.set('Allow', 'GET, HEAD, OPTIONS, PUT').sendStatus(204);
    })
    .all(methodNotAllowed('GET, HEAD, OPTIONS, PUT'));

  router
    .route(
      '/exhaustive/{path-string}/{path-enum}/{path-number}/{path-integer}/{path-boolean}/{path-string-array}/{path-enum-array}/{path-number-array}/{path-integer-array}/{path-boolean-array}',
    )
    .get(
      handlersFor(
        'exhaustiveParams',
        handlers.handleExhaustiveParams(getExhaustiveService),
      ),
    )
    .options((_, res) => {
      res.set('Allow', 'GET, HEAD, OPTIONS').sendStatus(204);
    })
    .all(methodNotAllowed('GET, HEAD, OPTIONS'));

  router
    .route('/exhaustive')
    .get(
      handlersFor(
        'exhaustiveFormats',
        handlers.handleExhaustiveFormats(getExhaustiveService),
      ),
    )
    .options((_, res) => {
      res.set('Allow', 'GET, HEAD, OPTIONS').sendStatus(204);
    })
    .all(methodNotAllowed('GET, HEAD, OPTIONS'));

  router
    .route('/gizmos')
    .get(handlersFor('getGizmos', handlers.handleGetGizmos(getGizmoService)))
    .post(
      handlersFor('createGizmo', handlers.handleCreateGizmo(getGizmoService)),
    )
    .put(
      handlersFor('updateGizmo', handlers.handleUpdateGizmo(getGizmoService)),
    )
    .options((_, res) => {
      res.set('Allow', 'GET, HEAD, OPTIONS, POST, PUT').sendStatus(204);
    })
    .all(methodNotAllowed('GET, HEAD, OPTIONS, POST, PUT'));

  router
    .route('/widgets/:id/foo')
    .get(
      handlersFor(
        'getWidgetFoo',
        handlers.handleGetWidgetFoo(getWidgetService),
      ),
    )
    .delete(
      handlersFor(
        'deleteWidgetFoo',
        handlers.handleDeleteWidgetFoo(getWidgetService),
      ),
    )
    .options((_, res) => {
      res.set('Allow', 'DELETE, GET, HEAD, OPTIONS').sendStatus(204);
    })
    .all(methodNotAllowed('DELETE, GET, HEAD, OPTIONS'));

  router
    .route('/widgets')
    .get(handlersFor('getWidgets', handlers.handleGetWidgets(getWidgetService)))
    .post(
      handlersFor(
        'createWidget',
        handlers.handleCreateWidget(getWidgetService),
      ),
    )
    .put(handlersFor('putWidget', handlers.handlePutWidget(getWidgetService)))
    .options((_, res) => {
      res.set('Allow', 'GET, HEAD, OPTIONS, POST, PUT').sendStatus(204);
    })
    .all(methodNotAllowed('GET, HEAD, OPTIONS, POST, PUT'));

  router
    .route('/')
    .get(...getMiddleware(middleware, '_onlySwaggerUI'), (_, res) => {
      const swaggerUiUrl = `https://unpkg.com/swagger-ui-dist@${swaggerUiVersion}/`;
      res.send(`
      <!DOCTYPE html>
      <html>
        <head>
          <title>BasketryExample v1</title>
          <link rel="stylesheet" type="text/css" href="${swaggerUiUrl}swagger-ui.css">
          <script src="${swaggerUiUrl}swagger-ui-bundle.js"></script>
          <script src="${swaggerUiUrl}swagger-ui-standalone-preset.js"></script>
        </head>
        <body>
          <div id="swagger-ui">CONTENT NOT LOADED</div>
          <script>
            const spec = ${JSON.stringify(schema)};
            const ui = SwaggerUIBundle({
              deepLinking: false,
              spec,
              dom_id: '#swagger-ui',
              presets: [SwaggerUIBundle.presets.apis],
              layout: 'BaseLayout',
              requestInterceptor: (request) => {
                const currentUrl = new URL(window.location.href);
                const requestUrl = new URL(request.url);
                const newUrl = currentUrl.href + requestUrl.href.substring(requestUrl.origin.length)
                request.url = newUrl;
                return request;
              }
            });
          </script>
        </body>
      </html>
    `);
    })
    .options((_, res) => {
      res.set('Allow', 'GET, HEAD, OPTIONS').sendStatus(204);
    })
    .all(methodNotAllowed('GET, HEAD, OPTIONS'));
  return router;
}
/**
 * Gets a list of middleware functions for a given name from the supplied middleware object(s).
 * If no middleware objects are supplied, an empty array is returned.
 * Handlers are returned in the order they are defined in the middleware object(s).
 * @param middleware - The middleware object(s) to extract middleware from
 * @param name - The name of the service method to get middleware for
 * @returns An array of {@link RequestHandler|express.RequestHandler} functions
 */
function getMiddleware<
  TName extends string,
  TMiddleware extends Partial<
    Record<TName, RequestHandler | RequestHandler[] | undefined>
  >,
>(
  middleware: TMiddleware | TMiddleware[] | undefined,
  name: TName,
): RequestHandler[] {
  if (!middleware) return [];
  const middlewareArray = Array.isArray(middleware) ? middleware : [middleware];

  return middlewareArray.flatMap((m) => {
    const _exceptSwaggerUI =
      m['_exceptSwaggerUI'] && name !== '_onlySwaggerUI'
        ? m['_exceptSwaggerUI']
        : [];

    const base = m[name] ? m[name] : [];
    const baseArray = Array.isArray(base) ? base : [base];
    return [...baseArray, ..._exceptSwaggerUI];
  });
}

/**
 * Gets a list of handlers for a given service method.
 * If overrides are provided, they are used in place of the default handler.
 * If no overrides are provided, the default handler is used.
 * @param overrides - The handler(s) to use in place of the default handler
 * @param defaultHandler - The default handler to use if no overrides are provided
 * @returns An array of {@link RequestHandler|express.RequestHandler} functions
 */
function getHandlers<TRequestHandler extends RequestHandler>(
  overrides: TRequestHandler | TRequestHandler[] | undefined,
  defaultHandler: TRequestHandler,
): TRequestHandler[] {
  if (!overrides) return [defaultHandler];
  return Array.isArray(overrides) ? overrides : [overrides];
}
